
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== User Model =====
enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  profileImage String?
  phoneNumber  String
  isAdmin      Boolean    @default(false)  
  isVerified   Boolean  @default(false)
  status       UserStatus @default(ACTIVE)
  patient      Patient[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}   

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

model Patient {
  id              String        @id @default(uuid())
  name            String
  userId          String        
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth     DateTime
  gender          Gender
  bloodGroup      BloodGroup?
  address         String?
  phoneNumber     String?
  emergencyContact String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


model Doctor {
  id               String              @id @default(uuid())
  fullName         String
  password         String
  gender           String
  phoneNumber      String
  email            String              @unique
  profileImage     String
  bio              String
  isVerified       Boolean      @default(false) 
  status           UserStatus   @default(ACTIVE)
  // Arrays
  languages        String[]            @default([]) 
  specializations  String[]            @default([])
  expertiseAreas   String[]            @default([])

  // JSONB fields
  education        Json
  experience       Json

  // Relations
  clinics          Clinic[]            @relation("DoctorClinics")
  availability     Availability[]      @relation("DoctorAvailability")
  consultationFees ConsultationFee[]   @relation("DoctorFees")

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}


model Clinic {
  id          Int      @id @default(autoincrement())
  doctor      Doctor   @relation("DoctorClinics", fields: [doctorId], references: [id])
  doctorId    String

  clinicName  String
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  phoneNumber String
}


model Availability {
  id         Int      @id @default(autoincrement())
  doctor     Doctor   @relation("DoctorAvailability", fields: [doctorId], references: [id])
  doctorId   String

  dayOfWeek  String   
  startTime  String   
  endTime    String
}



model ConsultationFee {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation("DoctorFees", fields: [doctorId], references: [id])
  doctorId  String

  mode      String  
  fee       Decimal  @db.Decimal(10, 2)
  currency  String   @default("INR")
}
